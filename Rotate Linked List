/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
Node* rev(Node* head,int cnt){
     if(!head || !head->next)return head;
     Node *prev = NULL,*pres = head , *next;
     while(pres!=NULL and cnt--){
          next = pres->next;
          pres ->next = prev;
          prev = pres;
          pres = next;
     }
     return prev;
}
Node *rotate(Node *head, int k) {
     // Write your code here.
     Node* temp = head;
     int len = 0;
     while(temp!=NULL){
          temp = temp ->next;
          len++;
     }
     k = k%len;
     temp = head;
     int b = len-k;
     int a = b;
     Node* res = new Node(0);
     Node* ans = res;
     while(a--){
          temp = temp ->next;
     }
     ans->next = rev(head,len-k);
     a=b;
     while(a--){
          ans = ans->next;
     }
     ans ->next = rev(temp,k);
     return rev(res->next,len);
}
