#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = nullptr;
            right = nullptr;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>* root){
    return !root -> left && !root -> right;
}

void addleft(TreeNode<int>* root,vector<int>&res){
    TreeNode<int>* cur = root->left;
    while(cur){
    if(!isLeaf(cur))res.push_back(cur->data);
    if(cur->left!=nullptr)cur=cur->left;
    else cur=cur->right;
    }
}
void addright(TreeNode<int>* root,vector<int>&res){
    vector<int>temp;
    TreeNode<int>*cur = root->right;
    while(cur){
        if(!isLeaf(cur))temp.push_back(cur->data);
    if(cur->right!=nullptr)cur = cur->right;
    else cur = cur->left;
    }

    for(int i=temp.size()-1;i>=0;i--){
        res.push_back(temp[i]);
    }
}
void addleaf(TreeNode<int>* root,vector<int>&res){
    if(isLeaf(root))res.push_back(root->data);

    if(root->left)addleaf(root->left,res);
    if(root->right)addleaf(root->right,res);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int>res;
    if(!root)return res;
    if(!isLeaf(root))res.push_back(root->data);
    addleft(root,res);
    addleaf(root,res);
    addright(root,res);
    return res;
}



















